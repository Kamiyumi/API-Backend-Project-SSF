# Generated by Django 5.0.6 on 2024-06-10 16:49

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AgeCategory',
            fields=[
                ('title', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('lower_limit_age', models.IntegerField(blank=True, null=True)),
                ('upper_limit_age', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('club_nr', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('club_orgnr', models.IntegerField(unique=True)),
                ('club_phone', models.CharField(blank=True, max_length=255)),
                ('club_email', models.EmailField(blank=True, max_length=320)),
                ('club_website', models.CharField(blank=True, max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=False)),
                ('paid', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('discipline', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('RF_nr', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('district_name', models.CharField(max_length=255)),
                ('district_orgnr', models.IntegerField(unique=True)),
                ('website', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('division_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('limit_teams', models.IntegerField()),
                ('limit_team_members', models.IntegerField()),
                ('teams_moving_up', models.IntegerField(default=0)),
                ('teams_moving_down', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('person_id', models.CharField(default=uuid.uuid4, editable=False, max_length=255, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('gender', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=320)),
                ('social_security_nr', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionType',
            fields=[
                ('competition_type_nickname', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('classic', models.BooleanField()),
                ('para', models.BooleanField()),
                ('ifn', models.BooleanField()),
                ('disciplines', models.ManyToManyField(to='SSF_app.discipline')),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('competition_category', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('start', models.DateField()),
                ('end', models.DateField()),
                ('reg_deadline', models.DateField()),
                ('location_address', models.CharField(blank=True, max_length=255)),
                ('contact_phone', models.CharField(blank=True, max_length=255)),
                ('contact_email', models.EmailField(blank=True, max_length=255)),
                ('contact_name', models.CharField(blank=True, max_length=255)),
                ('invitation', models.FileField(blank=True, null=True, upload_to='invitations/')),
                ('registration_open', models.BooleanField(default=False)),
                ('live_stream', models.URLField(blank=True, max_length=255, null=True)),
                ('club_orgnr', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='SSF_app.club')),
                ('competition_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.competitiontype')),
                ('district_orgnr', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='SSF_app.district')),
            ],
        ),
        migrations.AddField(
            model_name='club',
            name='district',
            field=models.ForeignKey(db_column='RF_nr', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.district'),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=245)),
                ('speaker', models.CharField(blank=True, max_length=255, null=True)),
                ('secretary', models.CharField(blank=True, max_length=255, null=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.competition')),
            ],
        ),
        migrations.CreateModel(
            name='LifterLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_nr', models.CharField(help_text="License number in the format 'initials' + '5 digits' + 'L' (e.g., cc12345L)", max_length=255, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('non-active', 'Non-active'), ('pending', 'Pending')], default='pending', max_length=255)),
                ('requested', models.DateField(help_text='Date of request')),
                ('terminates', models.DateField(blank=True, help_text='Date of license expiry/termination', null=True)),
                ('activated_date', models.DateField(blank=True, help_text='Date of license activation', null=True)),
                ('paid', models.BooleanField(default=False)),
                ('para', models.BooleanField(blank=True, null=True)),
                ('ifn', models.BooleanField(blank=True, null=True)),
                ('club_membership_date', models.DateField(blank=True, help_text='Date of club membership', null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.club')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.person')),
            ],
        ),
        migrations.CreateModel(
            name='RefereeLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referee_license_nr', models.CharField(max_length=255)),
                ('nr_missions', models.IntegerField(blank=True, default=0)),
                ('authority', models.CharField(max_length=255)),
                ('referee_category', models.CharField(choices=[('distriksdomare', 'Distriksdomare'), ('förbundsdomare', 'Förbundsdomare'), ('internationell domare kat 1', 'Internationell domare kat 1'), ('internationell domare kat 1', 'Internationell domare kat 2')], default='Ej angivet', max_length=255)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('requested', models.DateField(help_text='Date of request')),
                ('terminates', models.DateField(blank=True, help_text='Date of license expiry/termination', null=True)),
                ('activated_date', models.DateField(blank=True, help_text='Date of license activation', null=True)),
                ('paid', models.BooleanField(default=False)),
                ('club_membership_date', models.DateField(blank=True, help_text='Date of club membership', null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.club')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.person')),
            ],
        ),
        migrations.CreateModel(
            name='RefereeAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(blank=True, max_length=255, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.group')),
                ('referee_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.refereelicense')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_weight', models.DecimalField(decimal_places=3, max_digits=5)),
                ('date', models.DateField()),
                ('lot_nr', models.IntegerField()),
                ('placement', models.IntegerField()),
                ('WILKS_female_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('WILKS_male_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('IPFGL_male_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('IPFGL_female_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('DOTS_male_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('DOTS_female_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('WILKS_female_BP_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('WILKS_male_BP_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('IPFGL_male_BP_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('IPFGL_female_BP_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('DOTS_male_BP_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('DOTS_female_BP_score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('squat', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('benchpress', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('deadlift', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('age_category', models.ForeignKey(db_column='age_category_title', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.agecategory')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.group')),
                ('license_nr', models.ForeignKey(db_column='license_nr', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.lifterlicense')),
            ],
        ),
        migrations.CreateModel(
            name='Lift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('try_nr', models.IntegerField()),
                ('weight', models.DecimalField(decimal_places=2, max_digits=6)),
                ('goodlift', models.BooleanField()),
                ('discipline', models.ForeignKey(db_column='discipline', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.discipline')),
                ('result', models.ForeignKey(db_column='result_id', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.result')),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField()),
                ('end', models.DateField()),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.division')),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('serie_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('series_type', models.CharField(max_length=255)),
                ('year', models.IntegerField()),
                ('scoring_system', models.CharField(choices=[('WILKS', 'WILKS'), ('IPF2020', 'IPF2020'), ('IPFGL', 'IPFGL'), ('DOTS', 'DOTS')], max_length=255)),
                ('gender', models.CharField(blank=True, max_length=255, null=True)),
                ('competition_type_nickname', models.ForeignKey(db_column='competition_type_nickname', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.competitiontype')),
            ],
        ),
        migrations.AddField(
            model_name='division',
            name='series',
            field=models.ForeignKey(db_column='serie_id', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.series'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('paid', models.BooleanField(default=False)),
                ('club', models.ForeignKey(db_column='club_nr', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.club')),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.division')),
            ],
        ),
        migrations.CreateModel(
            name='RoundResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=10)),
                ('included_results', models.ManyToManyField(to='SSF_app.result')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.round')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.team')),
            ],
        ),
        migrations.CreateModel(
            name='Violation',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('violation', models.CharField(blank=True, max_length=255, null=True)),
                ('repeal_start', models.DateField()),
                ('repeal_end', models.DateField()),
                ('author_first_name', models.CharField(max_length=255)),
                ('author_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(max_length=255)),
                ('person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='SSF_app.person')),
            ],
        ),
        migrations.CreateModel(
            name='WeightClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upper_limit', models.DecimalField(decimal_places=2, max_digits=5)),
                ('lower_limit', models.DecimalField(decimal_places=2, max_digits=5)),
                ('title', models.CharField(max_length=255, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('gender', models.CharField(max_length=255)),
            ],
            options={
                'unique_together': {('upper_limit', 'lower_limit', 'gender')},
            },
        ),
        migrations.AddField(
            model_name='result',
            name='weight_class',
            field=models.ForeignKey(db_column='weight_class_title', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.weightclass'),
        ),
        migrations.CreateModel(
            name='QualifyingWeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimum', models.IntegerField()),
                ('qualifying_period_start', models.DateField()),
                ('qualifying_period_end', models.DateField()),
                ('age_category', models.ForeignKey(db_column='age_category_title', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.agecategory')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SSF_app.competition')),
                ('weight_class', models.ForeignKey(db_column='weight_class_title', on_delete=django.db.models.deletion.CASCADE, to='SSF_app.weightclass')),
            ],
        ),
        migrations.AddField(
            model_name='competitiontype',
            name='weightclasses',
            field=models.ManyToManyField(to='SSF_app.weightclass'),
        ),
        migrations.AddConstraint(
            model_name='lifterlicense',
            constraint=models.UniqueConstraint(fields=('person', 'license_nr', 'club'), name='unique_license'),
        ),
        migrations.AddConstraint(
            model_name='refereelicense',
            constraint=models.UniqueConstraint(fields=('person', 'referee_license_nr', 'club'), name='unique_referee_license'),
        ),
        migrations.AlterUniqueTogether(
            name='lift',
            unique_together={('try_nr', 'result', 'discipline')},
        ),
        migrations.AlterUniqueTogether(
            name='roundresult',
            unique_together={('team', 'round')},
        ),
    ]
